services:
  ollama:
    image: 'ollama/ollama:latest'
    container_name: ollama
    restart: unless-stopped
    ports:
      - '11434:11434'
    volumes:
      - ollama:/root/.ollama
    entrypoint: /bin/bash
    command: >
      -c "
        echo 'Starting Ollama...' &&
        ollama serve &
        until curl -s http://localhost:11434/api/tags; do sleep 1; done &&
        echo 'Pulling LLaVA model...' &&
        ollama pull llava &&
        echo 'Pulling BakLLaVA model...' &&
        ollama pull bakllava &&
        wait
      "
#  spring-app:
#    # your existing spring service config (build/image etc)
#    depends_on:
#      - ollama
#      - llava-ready
#      - bakllava-ready

  # === POSTGRES + PGVECTOR (Vector DB for AI app) ===
  pgvector:
    container_name: pgvector
    # Postgres 16 with pgvector extension pre-installed
    image: 'pgvector/pgvector:pg18'
    environment:
      - 'POSTGRES_DB=ai-art'             # Database name
      - 'POSTGRES_USER=ai-art'           # DB user
      - 'POSTGRES_PASSWORD=secret'       # DB password (don't hardcode in production)
    labels:
      - "org.springframework.boot.service-connection=postgres"
    ports:
      - '5432:5432'                     # Exposes Postgres on default port
    restart: unless-stopped

  # === MinIO for Object Storage
  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000" # MinIO S3 API port
      - "9001:9001" # MinIO Console port
    environment:
      MINIO_ROOT_USER: "minioadmin"
      MINIO_ROOT_PASSWORD: "minioadmin"
    volumes:
      - ./data:/data # Mount local 'data' directory to container's /data
    command: server /data --console-address :9001

  # === Zipkin tracing ===
  zipkin:
    container_name: zipkin
    # Zipkin tracing server
    image: 'openzipkin/zipkin:latest'
    # Zipkin UI/API port
    ports:
      - '9411:9411'
    restart: unless-stopped

# === VOLUMES ===
volumes:
  # Named volume for Ollama model data persistence
  ollama:
